<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="parsertable_8h" kind="file" language="C++">
    <compoundname>parsertable.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">map</includes>
    <includes local="no">vector</includes>
    <includes local="no">iostream</includes>
    <includes refid="symbol_8h" local="yes">../util/symbol.h</includes>
    <includedby refid="llpred_2parsergenerator_8h" local="yes">/root/fyp/project/src/parsergenerator/llpred/parsergenerator.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/root/fyp/project/src/parsergenerator/llpred/parsertable.h</label>
        <link refid="parsertable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
      <node id="3">
        <label>sstream</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>../util/symbol.h</label>
        <link refid="symbol_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>/root/fyp/project/src/parsergenerator/llpred/parsergenerator.h</label>
        <link refid="llpred_2parsergenerator_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/root/fyp/project/src/parsergenerator/llpred/parsertable.h</label>
        <link refid="parsertable_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/root/fyp/project/src/parsergenerator/factory.h</label>
        <link refid="factory_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/root/fyp/project/src/maingui.cpp</label>
        <link refid="maingui_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table" prot="public">ParseGen::Parser::LLPredictiveParser::ParserTable</innerclass>
    <innernamespace refid="namespace_parse_gen">ParseGen</innernamespace>
    <innernamespace refid="namespace_parse_gen_1_1_parser">ParseGen::Parser</innernamespace>
    <innernamespace refid="namespace_parse_gen_1_1_parser_1_1_l_l_predictive_parser">ParseGen::Parser::LLPredictiveParser</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>FIXME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../util/symbol.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_parse_gen_1_1_parser_1_1_l_l_predictive_parser" kindref="compound">ParseGen::Parser::LLPredictiveParser</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table" kindref="compound">ParserTable</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a4e54f87b191b06ff0d48492ceac3644b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a4e54f87b191b06ff0d48492ceac3644b" kindref="member">insert</ref>(<ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>nonTerminal,<sp/><ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>terminal,<sp/>std::vector&lt;Util::Symbol&gt;<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a4e54f87b191b06ff0d48492ceac3644b" kindref="member">insert</ref>)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(nonTerminal.isNonTerminal()<sp/>&amp;&amp;<sp/>terminal.isTerminal())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" kindref="member">_map</ref>[std::make_pair(nonTerminal,<sp/>terminal)]<sp/>=<sp/>std::vector&lt;Util::Symbol&gt;(<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a4e54f87b191b06ff0d48492ceac3644b" kindref="member">insert</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>error<sp/>messages!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>nonTerminal<sp/>&amp;<sp/>terminal<sp/>are<sp/>wrong<sp/>type<sp/>(invalid<sp/>insert<sp/>somehow)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>already<sp/>has<sp/>a<sp/>value<sp/>(ambiguous<sp/>grammar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a20768f40ec2f769b7c74f6bbb39632bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Util::Symbol&gt;<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a20768f40ec2f769b7c74f6bbb39632bf" kindref="member">get</ref>(<ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>nonTerminal,<sp/><ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>terminal)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(nonTerminal.isNonTerminal()<sp/>&amp;&amp;<sp/>terminal.isTerminal())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" kindref="member">_map</ref>.at(std::make_pair(nonTerminal,<sp/>terminal));</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a4020664d9b5119b39cea30cf2091d907" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a4020664d9b5119b39cea30cf2091d907" kindref="member">isSynch</ref>(<ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>nonTerminal,<sp/><ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>terminal)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a0c9d07697f20f52e3e54161f0d3a8fe1" kindref="member">isError</ref>(nonTerminal,<sp/>terminal))</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>this-&gt;<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" kindref="member">_map</ref>[std::make_pair(nonTerminal,<sp/>terminal)];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value[0].getType()<sp/>==<sp/><ref refid="namespace_parse_gen_1_1_parser_1_1_util_1a5282ed283137daf55acb5c82ed2ecbe7a55efe26371feb8143d658e05fd65e860" kindref="member">Util::SymbolType::SYNCH</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a0c9d07697f20f52e3e54161f0d3a8fe1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a0c9d07697f20f52e3e54161f0d3a8fe1" kindref="member">isError</ref>(<ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>nonTerminal,<sp/><ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/>terminal)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" kindref="member">_map</ref>.find(std::make_pair(nonTerminal,<sp/>terminal))<sp/>==<sp/>this-&gt;_map.end())</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vec<sp/>=<sp/>this-&gt;<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" kindref="member">_map</ref>.at(std::make_pair(nonTerminal,<sp/>terminal));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vec.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a1c6952131869491ad951698803a89a18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a1c6952131869491ad951698803a89a18" kindref="member">ParserTable</ref>(<ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a493e302c13be23fcc1011545a6adb488" kindref="member">start</ref>)<sp/>:<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a493e302c13be23fcc1011545a6adb488" kindref="member">start</ref>(<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a493e302c13be23fcc1011545a6adb488" kindref="member">start</ref>){};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a857d934a198b2d797840ac9a346f2d05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a857d934a198b2d797840ac9a346f2d05" kindref="member">creationCode</ref>()</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;ParserTable*<sp/>parseTable<sp/>=<sp/>new<sp/>ParserTable(Util::Symbol(\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a493e302c13be23fcc1011545a6adb488" kindref="member">start</ref>.<ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol_1a270a19c234614738ed31233b109e3d97" kindref="member">name</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>(Util::SymbolType)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;<ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a493e302c13be23fcc1011545a6adb488" kindref="member">start</ref>.<ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol_1a06360919e7f99bb129e361991c9db77a" kindref="member">getType</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;));&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pair<sp/>:<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" kindref="member">_map</ref>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;parseTable-&gt;insert(Util::Symbol(\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pair.first.first.name</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>(Util::SymbolType)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pair.first.first.getType()</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>Util::Symbol(\&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pair.first.second.name</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>(Util::SymbolType)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pair.first.second.getType()</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;),<sp/>std::vector&lt;Util::Symbol&gt;({&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>val<sp/>:<sp/>pair.second)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val.name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>(Util::SymbolType)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val.getType()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;},<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;}));&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a493e302c13be23fcc1011545a6adb488" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_parse_gen_1_1_parser_1_1_util_1_1_symbol" kindref="compound">Util::Symbol</ref><sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a493e302c13be23fcc1011545a6adb488" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIRST(α)<sp/>is<sp/>the<sp/>set<sp/>of<sp/>terminals<sp/>that<sp/>can<sp/>begin<sp/>strings<sp/>derived<sp/>from<sp/>α</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a87652cf1bd7d4b4c5e75d913479485be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::vector&lt;Util::Symbol&gt;,<sp/>std::set&lt;Util::Symbol&gt;&gt;<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a87652cf1bd7d4b4c5e75d913479485be" kindref="member">first</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FOLLOW(A)<sp/>is<sp/>the<sp/>set<sp/>of<sp/>terminals<sp/>that<sp/>can<sp/>immediately<sp/>follow<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a84517dd6c8710f38201df3250d0d9f75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;Util::Symbol,<sp/>std::set&lt;Util::Symbol&gt;&gt;<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1a84517dd6c8710f38201df3250d0d9f75" kindref="member">follow</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>support<sp/>LL(k)<sp/>grammars<sp/>by<sp/>changing<sp/>to<sp/>std::map&lt;std::pair&lt;Symbol,<sp/>Symbol&gt;,<sp/>std::vector&lt;std::vector&lt;Symbol&gt;&gt;&gt;<sp/>_map;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::pair&lt;Util::Symbol,<sp/>Util::Symbol&gt;,<sp/>std::vector&lt;Util::Symbol&gt;&gt;<sp/><ref refid="class_parse_gen_1_1_parser_1_1_l_l_predictive_parser_1_1_parser_table_1ab204df412059d268392ce91be00f79c7" kindref="member">_map</ref>;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/root/fyp/project/src/parsergenerator/llpred/parsertable.h"/>
  </compounddef>
</doxygen>
